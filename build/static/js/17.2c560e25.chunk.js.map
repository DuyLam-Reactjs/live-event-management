{"version":3,"sources":["views/users/login/Login.js"],"names":["queryString","require","Login","useState","email","password","emailValue","setEmail","history","useHistory","location","useLocation","parsedURL","parse","search","errorUserName","errorPassword","error","setError","validatedEmail","setValidatedEmail","onLogin","a","timeNow","Date","setFullYear","getFullYear","UserApi","login","then","res","data","accessToken","url","rel","saveAccessToken","push","message","handleKeyPress","event","key","className","md","lg","xl","name","type","placeholder","autoComplete","onChange","e","value","target","checkValueEmail","validateEmail","onKeyPress","style","color","textAlign","block","onClick"],"mappings":"iOAwBMA,EAAcC,EAAQ,KA8GbC,UA3GD,WACZ,MAA+BC,mBAAS,CACtCC,MAAM,GACNC,SAAS,KAFX,mBAAOC,EAAP,KAAmBC,EAAnB,KAIMC,EAAUC,cACVC,EAAWC,cAEXC,EAAYZ,EAAYa,MAAMH,EAASI,QAE7C,EAA0BX,mBAAS,CACjCY,cAAe,GACfC,cAAe,KAFjB,mBAAOC,EAAP,KAAcC,EAAd,KAKA,EAA4Cf,oBAAS,GAArD,mBAAOgB,EAAP,KAAuBC,EAAvB,KAaMC,EAAO,uCAAG,4BAAAC,EAAA,uDACRC,EAAU,IAAIC,MACZC,YAAYF,EAAQG,cAAgB,GACxCP,EACFQ,IAAQC,MAAR,OAActB,QAAd,IAAcA,OAAd,EAAcA,EAAYF,MAA1B,OAAiCE,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAYD,UAAUwB,MAAK,SAAAC,GAC1D,IAAMC,EAAOD,EAAIC,KACXC,EAAW,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAMC,YACpBC,EAAG,OAAGrB,QAAH,IAAGA,OAAH,EAAGA,EAAWsB,IACvBC,YAAgBH,GACZA,EACFxB,EAAQ4B,KACI,MAARH,EACEA,EACA,uCAGNf,EAAS,2BAAID,GAAL,IAAYD,cAAa,OAAEe,QAAF,IAAEA,OAAF,EAAEA,EAAMM,cAI7CnB,EAAS,2BAAID,GAAL,IAAYF,cAAe,qCApBvB,2CAAH,qDAwBPuB,EAAiB,SAACC,GACJ,UAAdA,EAAMC,KACRnB,KAIJ,OACE,qBAAKoB,UAAU,qDAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMA,UAAU,yBAAhB,SACE,cAAC,IAAD,CAAMC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAvB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOH,UAAU,MAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,uCACA,mBAAGA,UAAU,aAAb,qCACA,eAAC,IAAD,CAAaA,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOI,KAAK,iBAGhB,cAAC,IAAD,CAAQC,KAAK,OAAOC,YAAY,WAAWC,aAAa,WAChDC,SA3DH,SAACC,GAAO,IAAD,EACxBC,EAAK,UAAGD,EAAEE,cAAL,aAAG,EAAUD,MAClBE,EAAkBC,YAAcH,GACtC/B,EAAkBiC,GAClB9C,EAAS,2BAAID,GAAL,IAAiBF,MAAO+C,MAwDNI,WAAYjB,QAEhB,OAALrB,QAAK,IAALA,OAAA,EAAAA,EAAOF,gBACN,mBAAG0B,UAAU,OAAOe,MAAO,CAACC,MAAO,MAAOC,UAAW,OAArD,gBAA8DzC,QAA9D,IAA8DA,OAA9D,EAA8DA,EAAOF,gBAEvE,eAAC,IAAD,CAAa0B,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOI,KAAK,wBAGhB,cAAC,IAAD,CAAQC,KAAK,WAAWC,YAAY,WAAWC,aAAa,mBACpDC,SAlEH,SAACC,GACxB,IAAMC,EAAQD,EAAEE,OAAOD,MACvB5C,EAAS,2BAAID,GAAL,IAAiBD,SAAU8C,MAiETI,WAAYjB,QAEhB,OAALrB,QAAK,IAALA,OAAA,EAAAA,EAAOD,gBACN,mBAAIwC,MAAO,CAACC,MAAO,MAAOC,UAAW,OAArC,gBAA8CzC,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAOD,gBAEvD,cAAC,IAAD,CAASyC,MAAM,UAAUhB,UAAU,OAAOkB,OAAK,EAACC,QAASvC,EAAzD","file":"static/js/17.2c560e25.chunk.js","sourcesContent":["import React, { useState} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {validateEmail, saveAccessToken} from \"../../../helpers/common\";\n\nimport {\n  useHistory, useLocation,\n} from \"react-router-dom\"\nimport UserApi from \"../../../apis/userApi\";\n\n\nconst queryString = require('query-string');\n\n\nconst Login = () => {\n  const [emailValue, setEmail] = useState({\n    email:'',\n    password:'',\n  })\n  const history = useHistory()\n  const location = useLocation();\n\n  const parsedURL = queryString.parse(location.search)\n\n  const [error, setError] = useState({\n    errorUserName: '',\n    errorPassword: '',\n  })\n\n  const [validatedEmail, setValidatedEmail] = useState(false)\n\n  const onChangeUserName = (e) => {\n    const value = e.target?.value\n    const checkValueEmail = validateEmail(value)\n    setValidatedEmail(checkValueEmail)\n    setEmail({...emailValue, email: value})\n  }\n  const onChangePassWord = (e) => {\n    const value = e.target.value\n    setEmail({...emailValue, password: value})\n  }\n\n  const onLogin = async () => {\n    const timeNow = new Date()\n    timeNow.setFullYear(timeNow.getFullYear() + 1)\n    if (validatedEmail){\n      UserApi.login(emailValue?.email, emailValue?.password).then(res=>{\n        const data = res.data\n        const accessToken = data?.accessToken\n        const url = parsedURL?.rel\n        saveAccessToken(accessToken)\n        if (accessToken){\n          history.push(\n              url !== '/'\n              ? url\n              : '/instream-ads/content-provider-list')\n          // save cookie\n        }else {\n          setError({...error, errorPassword: data?.message})\n        }\n      })\n    }else {\n      setError({...error, errorUserName: 'Email không hợp lệ' })\n    }\n\n  }\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      onLogin()\n    }\n  }\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"9\" lg=\"7\" xl=\"6\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Login</h1>\n                    <p className=\"text-muted\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput type=\"text\" placeholder=\"Username\" autoComplete=\"username\"\n                              onChange={onChangeUserName}\n                              onKeyPress={handleKeyPress}/>\n                    </CInputGroup>\n                    {error?.errorUserName &&\n                      <p className=\"text\" style={{color: 'red', textAlign: 'end'}}>{error?.errorUserName}</p>\n                    }\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"current-password\"\n                              onChange={onChangePassWord}\n                              onKeyPress={handleKeyPress}/>\n                    </CInputGroup>\n                    {error?.errorPassword &&\n                      <p  style={{color: 'red', textAlign: 'end'}}>{error?.errorPassword}</p>\n                    }\n                    <CButton color=\"success\" className=\"px-4\" block onClick={onLogin}>Login</CButton>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n"],"sourceRoot":""}