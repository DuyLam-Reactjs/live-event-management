{"version":3,"sources":["views/instream-ads/TitleAds/TitleAds.js","views/base/tables/CustomTableContentList.js","views/base/tables/TablesContentList.js","views/instream-ads/ContentList/TypeContent.js","views/instream-ads/ContentList/CategoryContent.js","views/instream-ads/autoCompleteMaterialUI/AutoCompleteMaterial.js","views/instream-ads/ContentList/ListNameContentProvider.js","views/instream-ads/ContentList/AdsGroupContent.js","views/instream-ads/ContentList/ContentList.js","actions/inStreamAds.js"],"names":["TitleAds","props","title","isCreateProvider","editContentProvider","className","style","color","CustomTableContentList","currentPageList","fields","onHandleAdd","onEditContentItem","map","item","ind","key","content","ctIndex","contentProviders","provider","prIndex","adsGroups","adsGroup","adgIndex","contentTD","contentType","contentStatus","time","providerTD","add","contentRowSpan","temp","forEach","pr","length","handleContentId","providerRowSpan","rowSpan","name","type","status","parsedTimeCreate","updated_at","block","onClick","handleAddContentProvider","freeSet","cilPlus","group","id","handleContentItem","src","ConfigImage","edit","alt","rowPerPageList","value","StatusData","TablesContentList","setCurrentPageList","listAdsGroups","getListAdsGroups","setCurrentPage","setRowPerPage","currentPage","rowPerPage","maxPage","keyWord","category","idContentProvider","idAdsGroup","dispatch","useDispatch","useState","content_provider_ids","instream_ads_ids","is_visible_ads","updateItemContent","setItemContent","onChangeStatus","openPopup","POPUP","NAME","CONTENT","ADD_CONTENT","currentItem","EDIT_CONTENT","currentItemAds","currentItemContentProvider","width","index","onChangePage","nextButton","previousButton","activePage","pages","onActivePageChange","allData","TypeContent","typeFilter","handleChangeType","filter","setFilter","CategotyContent","categoryFilter","handleChangeCategory","useStyles","makeStyles","classUseStyles","AutoCompleteMaterial","classes","handleScroll","handleChangeContent","setName","listData","handleChangeContentProvider","nameDefault","focusInput","setFocus","newData","setNewData","useEffect","arr","unshift","Autocomplete","options","getOptionLabel","option","ads_group","onChange","event","values","onScroll","onFocus","size","border","marginTop","renderInput","params","TextField","label","variant","height","ListNameContentProvider","handleChangeListName","dataContentList","parsedID","nameProviderId","setNameProviderId","contentApi","getContentProviderById","then","res","data","success","AdsGroupContent","handleChangeAdsGroup","listAdsGroup","adsName","setAdsName","queryString","require","ContentList","dataListAds","useSelector","state","InStreamAds","history","useHistory","location","useLocation","parse","search","idProvider","LIST_ALL_INSTREAM_ADS","items","total","setTotal","setMaxPage","setKeyWord","setCategory","setType","setIdContentProvider","setIdAdsGroup","currentPageProvider","setPageProvider","setDataProvider","metadataProvider","setMetadataProvider","a","getListContentProvider","metadata","newDataList","concat","getList","window","addEventListener","removeEventListener","page","limit","parsedPageLimit","dataType","setDataType","getContentType","dataCategories","setDataCategories","getContentCategories","max","InStreamAdsApi","getListAllInStreamAds","result","ACTION_TYPE","payload","searchAndFilter","getContentList","marginBottom","maxWidth","push","idContentProviderItem","idAdsGroupsItem","placeholder","e","target","toLowerCase","onKeyPress","cilSearch","margin"],"mappings":"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","file":"static/js/15.9f7e4fa5.chunk.js","sourcesContent":["import React from \"react\";\nimport {CCol, CRow} from \"@coreui/react\";\n\nconst TitleAds = (props) => {\n  const {title, isCreateProvider, editContentProvider} = props\n  return (\n    <CRow className=\"pt-2 pb-4\">\n      <CCol className=\"col-lg-7\">\n        {isCreateProvider &&\n          <h3 className=\"m-0\">\n            <span style={{color:'#9B9B9B'}}> Content Provider List </span><strong> / Thêm Content Provider</strong>\n          </h3>\n        }\n        {editContentProvider &&\n          <h3 className=\"m-0\">\n            <span style={{color:'#9B9B9B'}}> Content Provider List </span><strong> / Sửa Content Provider</strong>\n          </h3>\n        }\n        <h2>{title}</h2>\n      </CCol>\n\n    </CRow>\n  )\n}\n\nexport default TitleAds\n","import React from 'react'\nimport {\n  CBadge,\n  CButton,\n  CCard, CCardBody,\n  CCol, CImg,\n  CRow\n} from \"@coreui/react\";\nimport {parsedTimeCreate} from \"../../../helpers/common\";\nimport CIcon from \"@coreui/icons-react\";\nimport {freeSet} from \"@coreui/icons\";\nimport ConfigImage from \"../../../config/ConfigImage\";\n\n\n\nconst CustomTableContentList = (props) => {\n  const {currentPageList, fields, onHandleAdd, onEditContentItem} = props || {}\n  const  handleAddContentProvider = (content, provider, adsGroup) => {\n    onHandleAdd && onHandleAdd(content, provider, adsGroup)\n  }\n  const handleContentItem = (content, provider, adsGroup) => {\n    onEditContentItem && onEditContentItem(content, provider, adsGroup)\n  }\n\n  const handleContentId = (content) => {\n    let temp = [];\n    (content?.contentProviders||[]).forEach(pr => {\n      temp = [...temp, ...(pr?.adsGroups || [])]\n    })\n    return (temp||[]).length\n  }\n\n  return(\n      <CRow className={'justify-content-between'}>\n        <CCol>\n          <CCard>\n            <CCardBody>\n            <table>\n              <thead>\n                <tr>\n                  {fields.map((item, ind)=>{\n                    return(\n                      <th key={item?.key + ind || ind}>{item?.key}</th>\n                    )\n                  })}\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  (currentPageList||[]).map((content, ctIndex) => {\n                    return (\n                      <>\n                        {\n                          (content?.contentProviders||[]).map((provider, prIndex) => {\n                            return (\n                              <>\n                                {\n                                  (provider?.adsGroups || []).map((adsGroup, adgIndex)=> {\n                                    let contentTD = null\n                                    let contentType = null\n                                    let contentStatus = null\n                                    let time = null\n                                    let providerTD = null\n                                    let add = null\n                                    const contentRowSpan = handleContentId(content)\n                                    const providerRowSpan = (provider?.adsGroups || []).length\n                                    if(prIndex === 0 && adgIndex === 0) {\n                                      contentTD = <td className=\"content\" rowSpan={contentRowSpan}>{content?.name}</td>\n                                      contentType = <td className=\"content\" rowSpan={contentRowSpan}>{content?.type}</td>\n                                      contentStatus = <td className=\"content\" rowSpan={contentRowSpan}>{content?.status}</td>\n                                      time = <td className=\"content\" rowSpan={contentRowSpan}>{parsedTimeCreate(content?.updated_at)}</td>\n                                      add = <td className=\"content \" rowSpan={contentRowSpan}>\n                                                  <CBadge>\n                                                    <CButton block color=\"success\" onClick={()=>handleAddContentProvider(content, provider, adsGroup)}>\n                                                      <CIcon  content={freeSet.cilPlus}/>\n                                                      <span className=\"mt-1\"> Add</span>\n                                                    </CButton>\n                                                  </CBadge>\n                                                </td>\n                                      providerTD = <td  className=\"content\" rowSpan={providerRowSpan}>{provider?.name}</td>\n                                    }\n                                    if(prIndex !== 0 && adgIndex === 0) {\n                                      providerTD = <td className=\"content\" rowSpan={providerRowSpan}>{provider?.name}</td>\n                                    }\n\n                                    return(\n                                      <tr>\n                                        {contentTD}\n                                        {contentType}\n                                        {contentStatus}\n                                        {providerTD}\n                                        <td className=\"content\">{adsGroup?.group}</td>\n                                        <td className=\"content\">{adsGroup?.status === 1 ? 'Hiện' : adsGroup?.status === 0 ? 'Ẩn' : ''}</td>\n                                        {time}\n                                        <td className=\"content \">\n                                          {provider?.id && <CBadge>\n                                            <CButton block color=\"info\" onClick={()=>handleContentItem(content, provider, adsGroup)}>\n                                              {/*<CIcon  name={'cil-pencil'}/>*/}\n                                              <CImg src={ConfigImage.edit} alt=\"edit\" />\n                                              <span className=\"ml-1\">Edit</span>\n                                            </CButton>\n                                          </CBadge>}\n                                        </td>\n                                        {add}\n                                      </tr>\n                                    )\n                                  })\n                                }\n                              </>\n                            )\n                          })\n                        }\n                      </>\n                    )\n                  })\n                }\n              </tbody>\n            </table>\n            </CCardBody>\n\n          </CCard>\n        </CCol>\n      </CRow>\n\n  )\n}\n\n\n\nexport default CustomTableContentList\n","import React, {useState} from 'react'\nimport {\n  CDropdown, CDropdownItem,\n  CDropdownMenu, CDropdownToggle,\n  CPagination,\n} from '@coreui/react'\nimport 'semantic-ui-css/semantic.min.css'\nimport CustomTableContentList from \"./CustomTableContentList\";\nimport {useDispatch} from \"react-redux\";\nimport {openPopup} from \"../../../actions/popup\";\nimport {POPUP} from \"../../../constants/constants\";\n\n\nconst TablesContentList = (props) => {\n  const {\n    currentPageList, setCurrentPageList,\n    listAdsGroups, getListAdsGroups,\n    setCurrentPage , setRowPerPage, currentPage,\n    rowPerPage, maxPage, keyWord,\n    category, type, idContentProvider,\n    idAdsGroup,\n  } = props\n  const dispatch = useDispatch()\n\n\n  const [updateItemContent, setItemContent] = useState({\n    content_provider_ids: [],\n    instream_ads_ids: [],\n    is_visible_ads: ''\n  })\n\n  const onChangePage = (item) => {\n    setRowPerPage(item?.value)\n  }\n\n  const onEditContentItem = (content, provider, adsGroup ) => {\n    dispatch(openPopup({\n      name: POPUP.NAME.CONTENT.EDIT_CONTENT,\n      currentItemAds: adsGroup,\n      currentItem: content,\n      currentItemContentProvider: provider,\n      currentPage,\n      rowPerPage,\n      setCurrentPageList,\n      keyWord,\n      category,\n      type,\n      idContentProvider,\n      idAdsGroup,\n    }))\n  }\n\n  const onHandleAdd = (item) => {\n    dispatch(openPopup({\n      name: POPUP.NAME.CONTENT.ADD_CONTENT,\n      listAdsGroups,\n      currentItem: item,\n      currentPage,\n      rowPerPage,\n      setCurrentPageList,\n      getListAdsGroups,\n      keyWord,\n      category,\n      type,\n      idContentProvider,\n      idAdsGroup,\n    }))\n  }\n\n  const onChangeStatus = (item) => {\n        if (item?.id === 'show') {\n          setItemContent({...updateItemContent, is_visible_ads: true})\n        }\n        else setItemContent({...updateItemContent, is_visible_ads: false})\n  }\n\n  const fields = [\n    { key: 'Tên Nội Dung' },\n    { key: 'Loại Nội Dung' },\n    { key: 'Trạng Thái Nội Dung'},\n    { key: 'Content Provider'},\n    { key: 'Ads Group'},\n    { key: 'Trạng Thái'},\n    { key: 'Ngày Cập Nhật'},\n    { key: 'Action'},\n    { key: 'Add+'},\n  ]\n\n  return (\n    <>\n      <CustomTableContentList\n        fields={fields}\n        onChangeStatus={onChangeStatus}\n        StatusData={StatusData}\n        onHandleAdd={onHandleAdd}\n        onEditContentItem={onEditContentItem}\n        currentPageList={currentPageList}\n      />\n      <div className=\"m-1 d-flex justify-content-between align-items-center\">\n        <CDropdown className=\"btn-group\" style={{ width: '100px' }}>\n          <CDropdownToggle color=\"default\" className='shadow-none row-page color-white'>\n            <span className=\"mr-2\" style={{ color: '#222'}}>{rowPerPage + ' dòng'}</span>\n          </CDropdownToggle>\n          <CDropdownMenu>\n            {rowPerPageList && (rowPerPageList || []).map((item, index) => {\n              return (\n                <CDropdownItem key={index} onClick={()=>onChangePage(item)}>{item?.name}</CDropdownItem>\n              )\n            })\n            }\n          </CDropdownMenu>\n        </CDropdown>\n        <CPagination\n          nextButton={'Sau'}\n          previousButton={'Trước'}\n          activePage={currentPage}\n          pages={maxPage}\n          onActivePageChange={setCurrentPage}\n        />\n      </div>\n    </>\n  )\n}\n\nconst rowPerPageList = [\n  { id: 1, name: '5 dòng', value: 5 },\n  { id: 2, name: '10 dòng', value: 10 },\n  { id: 3, name: '20 dòng', value: 20 },\n]\nconst StatusData = [\n  {id: 'show', name: \" Hiện\"},\n  {id: 'hide', name: \"Ẩn\"}\n]\n\nexport default TablesContentList\n","import React, {useState} from 'react'\nimport { CDropdown, CDropdownItem, CDropdownMenu, CDropdownToggle} from \"@coreui/react\";\n\nconst TypeContent = (props) => {\n  const {typeFilter,handleChangeType } = props\n  const [filter, setFilter] = useState('')\n  const onClick = (item) => {\n    setFilter(item.name)\n    handleChangeType && handleChangeType(item)\n  }\n\n  return(\n    <div className=\"pr-2\">\n        <p className=\"ml-1 mb-2\">Loại nội dung</p>\n        <CDropdown className=\"m-1 btn-group\" style={{width: '138px'}}>\n          <CDropdownToggle color=\"default\" className='border color-white'>\n            <span className=\"text-filter\">{filter === '' ? 'Tất cả' : filter}</span>\n          </CDropdownToggle>\n          <CDropdownMenu className=\"mt-1\" >\n            <CDropdownItem onClick={()=>onClick(allData)}>{allData?.name}</CDropdownItem>\n            <div>\n              {typeFilter && (typeFilter || []).map((item, index) => {\n                return (\n                  <CDropdownItem key={index} onClick={() => onClick(item)}>{item?.name}</CDropdownItem>\n                )\n              })\n              }\n            </div>\n          </CDropdownMenu>\n        </CDropdown>\n    </div>\n  )\n}\nconst allData = {id: '', name: 'Tất cả'}\nexport default TypeContent\n","import React, {useState} from 'react'\nimport { CDropdown, CDropdownItem, CDropdownMenu, CDropdownToggle} from \"@coreui/react\";\n\nconst CategotyContent = (props) => {\n  const {categoryFilter, handleChangeCategory} = props\n  const [filter, setFilter] = useState('')\n  const onClick = (item) => {\n    setFilter(item?.name)\n    handleChangeCategory && handleChangeCategory(item)\n  }\n  return(\n    <div className=\"pr-2\">\n        <p className=\"ml-1 mb-2\">Thể loại</p>\n        <CDropdown className=\"m-1 btn-group\" style={{width: '138px'}}>\n          <CDropdownToggle color=\"default\" className='border color-white'>\n            <span className=\"text-filter\" style={{ color: '#222' }}>{filter === '' ? 'Tất cả' : filter}</span>\n          </CDropdownToggle>\n          <CDropdownMenu>\n            <CDropdownItem onClick={()=>onClick(allData)}>{allData?.name}</CDropdownItem>\n            <div>\n              {categoryFilter && (categoryFilter || []).map((item, index) => {\n                return (\n                  <CDropdownItem key={index} onClick={() => onClick(item)}>{item?.name}</CDropdownItem>\n                )\n              })\n              }\n            </div>\n          </CDropdownMenu>\n        </CDropdown>\n    </div>\n  )\n}\n\nconst allData = {id: '', name: 'Tất cả'}\nexport default CategotyContent\n","import React, {useEffect, useState} from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {classUseStyles} from \"../../../helpers/common\";\n\nconst useStyles = makeStyles(classUseStyles())\nconst AutoCompleteMaterial =  (props) => {\n    const classes = useStyles()\n    const {\n        name,\n        handleScroll,\n        handleChangeContent,\n        setName,\n        listData,\n        handleChangeContentProvider,\n        nameDefault\n    } = props\n    const [focusInput, setFocus] = useState(true)\n\n\n    const onChange = (event, values) => {\n        handleChangeContent && handleChangeContent(values)\n        handleChangeContentProvider && handleChangeContentProvider(values)\n        if (!nameDefault) setName(values)\n    }\n    const onFocus = () => {\n        setFocus(false)\n    }\n    const [newData, setNewData] = useState([])\n    useEffect(()=>{\n        const arr = [...listData]\n        arr.unshift({ id: 'all', name: \"Tất cả\"})\n        setNewData(arr)\n    },[listData])\n    return(\n        <Autocomplete\n            classes={classes}\n            className={\"color-white btn-filter ml-1 mr-1\"}\n            options={newData}\n            getOptionLabel={(option) => (option ? (option?.name || option?.ads_group) : '')}\n            onChange={onChange}\n            onScroll={handleScroll}\n            onFocus={onFocus}\n            size={\"small\"}\n            style={{\n                border: '1px solid #d8dbe0',\n                marginTop: '11px',\n            }}\n            renderInput={(params) =>\n                focusInput\n                    ? <TextField\n                        {...params}\n                        label={\n                            name\n                                ? name\n                                : \"Tất cả\"\n                        }\n                        variant=\"outlined\"\n                        style={{height: '36px'}}\n                    />\n                    : <TextField\n                        {...params}\n                        variant=\"outlined\"\n                        style={{height: '36px'}}\n                    />\n            }\n        />\n    )\n}\nexport default AutoCompleteMaterial","import React, {useEffect, useState} from 'react'\nimport contentApi from \"../../../apis/contentApi\";\nimport AutoCompleteMaterial from \"../autoCompleteMaterialUI/AutoCompleteMaterial\";\n\n\nconst ListNameContentProvider = (props) => {\n  const {\n    handleChangeListName,\n    dataContentList,\n    handleScroll,\n    parsedID\n  } = props\n\n\n  const [nameProviderId, setNameProviderId] = useState('')\n  useEffect(()=>{\n        if (parsedID?.id){\n            contentApi.getContentProviderById(parsedID?.id).then(res=>{\n                const data = res?.data\n                if (res?.success){\n                    setNameProviderId(data?.name)\n                }\n            })\n        }\n    },[])\n\n  return(\n    <div className=\"pr-2\">\n        <p className=\"ml-1 mb-2\">Content provider</p>\n        <AutoCompleteMaterial\n            listData={dataContentList}\n            name={nameProviderId}\n            handleChangeContent={handleChangeListName}\n            setName={setNameProviderId}\n            handleScroll={handleScroll}\n        />\n\n    </div>\n  )\n}\n\nexport default ListNameContentProvider\n","import React, { useState} from 'react'\nimport { CDropdown, CDropdownToggle} from \"@coreui/react\";\nimport AutoCompleteMaterial from \"../autoCompleteMaterialUI/AutoCompleteMaterial\";\n\n\nconst AdsGroupContent = (props) => {\n  const { handleChangeAdsGroup, listAdsGroup, } = props\n  const [adsName, setAdsName] = useState('')\n  return(\n    <div className=\"pr-2\">\n      <p className=\"ml-1 mb-2\">Ads group</p>\n      { listAdsGroup ?\n          <AutoCompleteMaterial\n              name={adsName?.ads_group}\n              setName={setAdsName}\n              listData={listAdsGroup}\n              handleChangeContent={handleChangeAdsGroup}\n          />\n          : <CDropdown className=\"m-1 btn-group\" style={{width: '200px'}}>\n            <CDropdownToggle color=\"default\" className='border color-white'>\n              <span className='padding-ads-dropdown' >{'Tất cả'}</span>\n            </CDropdownToggle>\n          </CDropdown>\n      }\n\n\n    </div>\n  )\n}\n\nexport default AdsGroupContent\n","import React, {useEffect, useState} from 'react'\nimport TablesContentList from \"../../base/tables/TablesContentList\";\nimport {\n  CInput, CInputGroup,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport TypeContent from \"./TypeContent\";\nimport CategotyContent from \"./CategoryContent\";\nimport ListNameContentProvider from \"./ListNameContentProvider\";\nimport AdsGroupContent from \"./AdsGroupContent\";\nimport {freeSet} from \"@coreui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport contentApi from \"../../../apis/contentApi\";\nimport {getListAllInStreamAds} from \"../../../actions/inStreamAds\";\nimport TitleAds from \"../TitleAds/TitleAds\";\nimport {parsedPageLimit} from \"../../../helpers/common\";\nimport {useHistory, useLocation} from \"react-router\";\n\nconst queryString = require('query-string');\n\n\nconst ContentList = () => {\n\n  const dataListAds = useSelector(state => state.InStreamAds)\n\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const location = useLocation()\n  const parsedID = queryString.parse(location.search)\n  const idProvider = parsedID?.id\n  const listAdsGroups = dataListAds?.LIST_ALL_INSTREAM_ADS?.items\n\n  const [currentPageList, setCurrentPageList] = useState([])\n  const [total, setTotal] = useState()\n  const [currentPage, setCurrentPage] = useState(1);\n  const [rowPerPage, setRowPerPage] = useState(10);\n  const [maxPage, setMaxPage] = useState(1);\n  const [keyWord, setKeyWord] = useState('')\n  const [category, setCategory] = useState('')\n  const [type, setType] = useState('')\n  const [idContentProvider, setIdContentProvider] = useState(idProvider || '')\n  const [idAdsGroup, setIdAdsGroup] = useState('')\n\n\n  const [currentPageProvider, setPageProvider] = useState(0)\n  const [dataContentList, setDataProvider] = useState([])\n  const [metadataProvider, setMetadataProvider] = useState()\n\n  useEffect( ()=>{\n    async function getList () {\n      contentApi.getListContentProvider(10, currentPageProvider).then(res=>{\n        const data = res?.data\n        if (res?.success) {\n          setMetadataProvider(data?.metadata)\n          let dataList = [...dataContentList]\n          let newDataList = dataList.concat(data?.items)\n          setDataProvider(newDataList)\n        }\n      })\n    }\n    getList()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[currentPageProvider])\n\n\n  useEffect(() => {\n    function watchScroll() {\n      window.addEventListener(\"scroll\", handleScroll);\n    }\n    watchScroll()\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    }\n  })\n\n  const handleScroll = () => {\n    const { page, limit, total } = metadataProvider || {}\n    let maxPage = parsedPageLimit(total, limit)\n\n    if ((page + 1) * limit >= total && (page + 1) > maxPage) return\n    setPageProvider((page || 0) + 1 )\n  }\n\n\n  const [dataType, setDataType] = useState()\n  useEffect(()=>{\n    contentApi?.getContentType().then(res=>{\n      const data = res?.data\n      if (res.success) {\n        setDataType(data?.items)\n      }\n    })\n  },[])\n  const [dataCategories, setDataCategories] = useState()\n  useEffect(()=>{\n    contentApi?.getContentCategories().then(res=>{\n      const data = res?.data\n      if (res.success) {\n        setDataCategories(data?.items)\n      }\n    })\n  },[])\n\n  useEffect(() => {\n    if (currentPageList) {\n      let max = parsedPageLimit(total, rowPerPage)\n      setMaxPage(max)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [total, rowPerPage])\n\n\n\n  const handleChangeType = async (item) => {\n    const type = item?.id\n    await setType( type)\n    setCurrentPage(1)\n  }\n  const handleChangeCategory = (item) =>{\n    const category = item?.id\n    setCategory( category)\n    setCurrentPage(1)\n  }\n  const handleChangeListName = (item) => {\n    if (item?.id === 'all'){\n      history.push('/instream-ads/content-list')\n      setIdContentProvider('')\n    }else {\n      const idContentProviderItem = item?.id\n      setIdContentProvider(idContentProviderItem)\n      setCurrentPage(1)\n      if (idContentProviderItem){\n        getListAdsGroups(idContentProviderItem)\n      }\n    }\n  }\n\n  const getListAdsGroups = (id) => {\n    dispatch(getListAllInStreamAds(id))\n  }\n\n  const handleChangeAdsGroups = (item) => {\n    if (item?.id === 'all'){\n      history.push('/instream-ads/content-list')\n      setIdAdsGroup('')\n    }else {\n      const idAdsGroupsItem = item?.id\n      setIdAdsGroup(idAdsGroupsItem)\n      setCurrentPage(1)\n    }\n  }\n  const handleChangeKeyword = (e) => {\n    const value = e.target.value?.toLowerCase()\n    setKeyWord(value)\n  }\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      searchAndFilter();\n    }\n  }\n  const searchAndFilter = () => {\n    contentApi.getContentList(\n      currentPage-1,\n      rowPerPage,\n      keyWord,\n      category,\n      type,\n      idContentProvider,\n      idAdsGroup,\n    ).then(res=>{\n      if (res.success){\n        const data = res?.data\n        setCurrentPageList(data?.items)\n        setTotal(data?.metadata?.total)\n      }\n    })\n  }\n\n  useEffect(()=>{\n\n    if (!category && !type && !idContentProvider && !idAdsGroup) {\n      contentApi?.getContentList(\n        currentPage -1,\n        rowPerPage,\n        keyWord,\n        category,\n        type,\n        idContentProvider,\n        idAdsGroup,\n      ).then(\n        res => {\n          const data = res?.data\n          if (res?.success) {\n            setCurrentPageList(() => data?.items)\n            setTotal(data?.metadata?.total)\n          }\n        }\n      )\n    }else searchAndFilter()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    currentPage,\n    rowPerPage,\n    category,\n    type,\n    idContentProvider,\n    idAdsGroup,\n  ])\n\n  return (\n    <div>\n      <TitleAds title={\"Content List\"}/>\n      <div className={'d-flex flex-row'} style={{marginBottom: '1rem', maxWidth: '100%'}}>\n        <TypeContent\n          typeFilter={dataType}\n          handleChangeType={handleChangeType}\n        />\n        <CategotyContent\n          categoryFilter={dataCategories}\n          handleChangeCategory={handleChangeCategory}\n        />\n        <ListNameContentProvider\n          dataContentList={dataContentList}\n          handleChangeListName={handleChangeListName}\n          handleScroll={handleScroll}\n          parsedID={parsedID}\n        />\n        <AdsGroupContent\n          listAdsGroup={listAdsGroups}\n          handleChangeAdsGroup={handleChangeAdsGroups}\n        />\n        <div className=\"pr-2 pl-1\">\n            <CInputGroup className=\"pt-4\" style={{marginTop: '0.64rem'}}>\n              <CInput\n                className=\"input-search\"\n                name='keyword'\n                type=\"text\"\n                placeholder='Tìm phim / show / kênh'\n                style={{ color: '#222'}}\n                onChange={handleChangeKeyword}\n                onKeyPress={handleKeyPress}\n              />\n              <button className=\"btn btn-square btn-default color-black btn-search\"\n                      onClick={searchAndFilter}>\n                <CIcon content={freeSet.cilSearch} size={'lg'} style={{margin: 0}} />\n              </button>\n            </CInputGroup>\n        </div>\n      </div>\n      <div>\n        <TablesContentList\n          currentPageList={currentPageList }\n          setRowPerPage={setRowPerPage}\n          setCurrentPage={setCurrentPage}\n          rowPerPage={rowPerPage}\n          currentPage={currentPage}\n          maxPage={maxPage}\n          setCurrentPageList={setCurrentPageList}\n          keyWord={keyWord}\n          category={category}\n          type={type}\n          idContentProvider={idContentProvider}\n          idAdsGroup={idAdsGroup}\n        />\n      </div>\n    </div>\n  )\n}\n\n\nexport default ContentList\n","import {ACTION_TYPE} from \"./actionType\";\nimport InStreamAdsApi from \"../apis/inStreamAdsApi\";\n\n\nexport const setInStreamAds = (item) =>{\n  return dispatch => {\n    return InStreamAdsApi.setInStreamAds(item).then(res => {\n      const result = {\n        type: ACTION_TYPE.INSTREAM_ADS,\n        payload: res\n      }\n      dispatch(result)\n      return res\n    })\n  }\n}\n\nexport const getListInStreamAds = (id) =>{\n  return dispatch => {\n    return InStreamAdsApi.getListInStreamAds(id).then(res => {\n      const result = {\n        type: ACTION_TYPE.LIST_INSTREAM_ADS,\n        payload: res\n      }\n      dispatch(result)\n      return res\n    })\n  }\n}\nexport const getListAllInStreamAds = (id) =>{\n  return dispatch => {\n    return InStreamAdsApi.getListAllInStreamAds(id).then(res => {\n      const result = {\n        type: ACTION_TYPE.LIST_ALL_INSTREAM_ADS,\n        payload: res\n      }\n      dispatch(result)\n      return res\n    })\n  }\n}\nexport const getListInStreamAdsById = (id) =>{\n  return dispatch => {\n    return InStreamAdsApi.getListInStreamAdsById(id).then(res => {\n      const result = {\n        type: ACTION_TYPE.LIST_INSTREAM_ADS_ID,\n        payload: res\n      }\n      dispatch(result)\n      return res\n    })\n  }\n}\nexport const deleteInStreamAdsById = (id) =>{\n  return dispatch => {\n    return InStreamAdsApi.deleteInStreamAdsById(id).then(res => {\n      const result = {\n        type: ACTION_TYPE.DELETE_INSTREAM_ADS_ID,\n        payload: res\n      }\n      dispatch(result)\n      return res\n    })\n  }\n}\n"],"sourceRoot":""}