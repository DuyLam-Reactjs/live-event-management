{"version":3,"sources":["views/instream-ads/TitleAds/TitleAds.js","views/users/Users.js"],"names":["TitleAds","props","title","isCreateProvider","editContentProvider","className","style","color","rowPerPageList","id","name","value","Users","dispatch","useDispatch","useState","currentPageList","setCurrentPageList","editField","setEditField","currentPage","setCurrentPage","rowPerPage","setRowPerPage","maxPage","setMaxPage","total","setTotal","useEffect","userApi","listUser","then","res","data","success","items","metadata","max","parsedPageLimit","map","i","isEdit","forEach","user","find","j","field","Fragment","fields","itemsPerPage","scopedSlots","item","email","role","read","block","write","is_admin","onClick","openPopup","POPUP","NAME","USER","EDIT_USER","userItem","handleSaveEdit","src","ConfigImage","edit","alt","DELETE_USER","handleOpenDelete","deleteAds","width","index","onChangePage","nextButton","previousButton","activePage","pages","onActivePageChange"],"mappings":"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","file":"static/js/16.267543f2.chunk.js","sourcesContent":["import React from \"react\";\nimport {CCol, CRow} from \"@coreui/react\";\n\nconst TitleAds = (props) => {\n  const {title, isCreateProvider, editContentProvider} = props\n  return (\n    <CRow className=\"pt-2 pb-4\">\n      <CCol className=\"col-lg-7\">\n        {isCreateProvider &&\n          <h3 className=\"m-0\">\n            <span style={{color:'#9B9B9B'}}> Content Provider List </span><strong> / Thêm Content Provider</strong>\n          </h3>\n        }\n        {editContentProvider &&\n          <h3 className=\"m-0\">\n            <span style={{color:'#9B9B9B'}}> Content Provider List </span><strong> / Sửa Content Provider</strong>\n          </h3>\n        }\n        <h2>{title}</h2>\n      </CCol>\n\n    </CRow>\n  )\n}\n\nexport default TitleAds\n","import React, { useState, useEffect } from 'react'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton, CDropdown, CDropdownToggle, CDropdownMenu, CDropdownItem, CPagination, CImg,\n} from '@coreui/react'\n\nimport { useDispatch } from \"react-redux\";\nimport TitleAds from \"../instream-ads/TitleAds/TitleAds\";\nimport {parsedPageLimit} from \"../../helpers/common\";\nimport userApi from \"../../apis/userApi\";\nimport {openPopup} from \"../../actions/popup\";\nimport {POPUP} from \"../../constants/constants\";\nimport ConfigImage from \"../../config/ConfigImage\";\n\nconst Users = () => {\n  const dispatch = useDispatch();\n\n\n  const [currentPageList, setCurrentPageList] = useState()\n  const [editField, setEditField] = useState();\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [rowPerPage, setRowPerPage] = useState(10);\n  const [maxPage, setMaxPage] = useState(1);\n  const [total, setTotal] = useState()\n\n\n  useEffect(() => {\n    userApi?.listUser(currentPage, rowPerPage).then(res => {\n      const data = res?.data\n      if (res?.success){\n        setCurrentPageList(data?.items)\n        setTotal(data?.metadata?.total)\n      }\n    })\n  }, [currentPage, rowPerPage])\n\n  useEffect(() => {\n    if (currentPageList) {\n      let max = parsedPageLimit(total, rowPerPage)\n      setMaxPage(max)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [total, rowPerPage])\n\n  useEffect(() => {\n    let data = (currentPageList || []).map(i => ({ ...i, isEdit: false }));\n    data?.forEach(i => {\n      const user = editField?.find(j => j.id === i.id);\n      i.isEdit = user ? user.isEdit : false;\n    })\n    setEditField(data)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPageList])\n\n  const onChangePage = (item) => {\n    setRowPerPage(item?.value)\n  }\n\n  const handleSaveEdit = (item) => {\n    dispatch(openPopup({\n      name: POPUP.NAME.USER.EDIT_USER,\n      editField,\n      setEditField,\n      userItem: item\n    }))\n  }\n\n\n\n  const handleOpenDelete = (item) => {\n    dispatch(openPopup({\n      name: POPUP.NAME.USER.DELETE_USER,\n      item,\n      currentPage,\n      rowPerPage,\n      setCurrentPageList\n    }))\n  }\n\n\n  const field = true ? ['Email', 'Quyền hạn', \"Quản lý\"] : ['Email', 'Quyền hạn']\n  return (\n    <React.Fragment>\n      <div className='justify-content-between'>\n        <TitleAds title={'User List'}/>\n        <CRow>\n          <CCol>\n            <CCard>\n              <CCardBody>\n                <CDataTable\n                  items={ currentPageList}\n                  fields={field}\n                  itemsPerPage={10}\n                  scopedSlots={{\n                    'Email':\n                      (item) => (\n                        <td>\n                          {item.email}\n                        </td>\n                      ),\n                    'Quyền hạn':\n                      (item) => (\n                            <td >\n                              {item?.role?.read &&\n                              <CBadge>\n                                <CButton block color=\"success\">\n                                   Read\n                                </CButton>\n                              </CBadge>\n                              }\n                              {item?.role?.write &&\n                              <CBadge>\n                                <CButton block color=\"success\">\n                                  Write\n                                </CButton>\n                              </CBadge>\n                              }\n                              {item?.role?.is_admin &&\n                              <CBadge>\n                                <CButton block color=\"success\">\n                                  Admin\n                                </CButton>\n                              </CBadge>\n                              }\n                            </td>\n                          ),\n\n                    'Quản lý':\n                      (item) => (\n                        <td>\n                          <CBadge>\n                            <CButton block color=\"info\" onClick={()=>handleSaveEdit(item)}>\n                              {/*<CIcon  name={'cil-pencil'}/> */}\n                              <CImg src={ConfigImage.edit} alt=\"edit\" />\n                              <span className=\"ml-1\">Chỉnh sửa</span>\n                            </CButton>\n                          </CBadge>\n                          <CBadge>\n                            <CButton block color=\"danger\" onClick={()=>handleOpenDelete(item)}>\n                              {/*<CIcon name={'cil-x'} /> */}\n                              <CImg src={ConfigImage.deleteAds} alt=\"delete\"/>\n                              {/*<span className=\"ml-1\">Xóa</span>*/}\n                            </CButton>\n                          </CBadge>\n                        </td>\n                      ),\n\n                  }}\n                />\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n        <div className=\"m-1 d-flex justify-content-between align-items-center\">\n          <CDropdown className=\"btn-group\" style={{ width: '100px',  }}>\n            <CDropdownToggle color=\"default\" className='shadow-none mb-2 row-page color-white'>\n              <span className=\"mr-2\" style={{ color: '#222'}}>{rowPerPage + ' dòng'}</span>\n            </CDropdownToggle>\n            <CDropdownMenu>\n              {rowPerPageList && (rowPerPageList || []).map((item, index) => {\n                return (\n                  <CDropdownItem key={index} onClick={()=>onChangePage(item)}>{item?.name}</CDropdownItem>\n                )\n              })\n              }\n            </CDropdownMenu>\n          </CDropdown>\n          <CPagination\n            nextButton={'Sau'}\n            previousButton={'Trước'}\n            activePage={currentPage}\n            pages={maxPage}\n            onActivePageChange={setCurrentPage}\n          />\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\nconst rowPerPageList = [\n  { id: 1, name: '5 dòng', value: 5 },\n  { id: 2, name: '10 dòng', value: 10 },\n  { id: 3, name: '20 dòng', value: 20 },\n]\n\nexport default Users\n"],"sourceRoot":""}