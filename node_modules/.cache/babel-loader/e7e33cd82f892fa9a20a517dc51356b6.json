{"ast":null,"code":"import Cookie from 'react-cookies';\nimport * as ConfigEnv from './ConfigEnv';\nconst KEY = {\n  ACCESS_TOKEN: 'access_token',\n  ACCESS_TOKEN_TEST: 'access_token_test',\n  ACCESS_TOKEN_DEV: 'access_token_dev',\n  ANONYMOUS_TOKEN: 'anonymous_token'\n};\nconst METHOD = {\n  SAVE: 'SAVE',\n  LOAD: 'LOAD',\n  REMOVE: 'REMOVE'\n};\n\nfunction getTokenKey() {\n  let key = KEY.ACCESS_TOKEN;\n  const domainAPI = ConfigEnv.DOMAIN_API;\n  const isTesting = (domainAPI || '').includes('testing-api');\n  const isDev = (domainAPI || '').includes('dev-api');\n  if (isTesting) key = KEY.ACCESS_TOKEN_TEST;else if (isDev) key = KEY.ACCESS_TOKEN_DEV;\n  return key;\n}\n\nfunction handleCookie({\n  type,\n  key,\n  value,\n  option\n}) {\n  //time expire token\n  switch (type) {\n    case METHOD.SAVE:\n      {\n        return Cookie.save(key, value, option);\n      }\n\n    case METHOD.LOAD:\n      {\n        return Cookie.load(key);\n      }\n\n    case METHOD.REMOVE:\n      {\n        Cookie.remove(key, option);\n        return;\n      }\n  }\n}\n\nfunction remove(key, removeOption) {\n  const timeNow = new Date();\n  timeNow.setFullYear(timeNow.getFullYear() + 1);\n  const option = {\n    expires: timeNow,\n    path: '/'\n  };\n  const oldOption = {\n    expires: timeNow,\n    domain: '.vieon.vn',\n    path: '/'\n  };\n\n  if (removeOption) {\n    Cookie.remove(key, removeOption);\n  } else {\n    Cookie.remove(key, option);\n    Cookie.remove(key, oldOption);\n  }\n}\n\nexport default {\n  KEY,\n  METHOD,\n  getTokenKey,\n  handleCookie,\n  remove\n};","map":{"version":3,"sources":["/Users/admin/Desktop/SourceDevVieON/LiveEvent/src/config/ConfigCookie.js"],"names":["Cookie","ConfigEnv","KEY","ACCESS_TOKEN","ACCESS_TOKEN_TEST","ACCESS_TOKEN_DEV","ANONYMOUS_TOKEN","METHOD","SAVE","LOAD","REMOVE","getTokenKey","key","domainAPI","DOMAIN_API","isTesting","includes","isDev","handleCookie","type","value","option","save","load","remove","removeOption","timeNow","Date","setFullYear","getFullYear","expires","path","oldOption","domain"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AAEA,MAAMC,GAAG,GAAG;AACVC,EAAAA,YAAY,EAAG,cADL;AAEVC,EAAAA,iBAAiB,EAAG,mBAFV;AAGVC,EAAAA,gBAAgB,EAAG,kBAHT;AAIVC,EAAAA,eAAe,EAAG;AAJR,CAAZ;AAOA,MAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE,MADO;AAEbC,EAAAA,IAAI,EAAE,MAFO;AAGbC,EAAAA,MAAM,EAAE;AAHK,CAAf;;AAOA,SAASC,WAAT,GAAwB;AACtB,MAAIC,GAAG,GAAGV,GAAG,CAACC,YAAd;AACA,QAAMU,SAAS,GAAGZ,SAAS,CAACa,UAA5B;AACA,QAAMC,SAAS,GAAG,CAACF,SAAS,IAAI,EAAd,EAAkBG,QAAlB,CAA2B,aAA3B,CAAlB;AACA,QAAMC,KAAK,GAAG,CAACJ,SAAS,IAAI,EAAd,EAAkBG,QAAlB,CAA2B,SAA3B,CAAd;AACA,MAAID,SAAJ,EAAeH,GAAG,GAAGV,GAAG,CAACE,iBAAV,CAAf,KACK,IAAIa,KAAJ,EAAWL,GAAG,GAAGV,GAAG,CAACG,gBAAV;AAChB,SAAOO,GAAP;AACD;;AAED,SAASM,YAAT,CAAuB;AAACC,EAAAA,IAAD;AAAOP,EAAAA,GAAP;AAAYQ,EAAAA,KAAZ;AAAmBC,EAAAA;AAAnB,CAAvB,EAAmD;AACjD;AACA,UAAQF,IAAR;AACE,SAAKZ,MAAM,CAACC,IAAZ;AAAkB;AAChB,eAAOR,MAAM,CAACsB,IAAP,CAAYV,GAAZ,EAAiBQ,KAAjB,EAAwBC,MAAxB,CAAP;AACD;;AACD,SAAKd,MAAM,CAACE,IAAZ;AAAkB;AAChB,eAAOT,MAAM,CAACuB,IAAP,CAAYX,GAAZ,CAAP;AACD;;AACD,SAAKL,MAAM,CAACG,MAAZ;AAAoB;AAClBV,QAAAA,MAAM,CAACwB,MAAP,CAAcZ,GAAd,EAAmBS,MAAnB;AACA;AACD;AAVH;AAaD;;AACD,SAASG,MAAT,CAAgBZ,GAAhB,EAAqBa,YAArB,EAAkC;AAChC,QAAMC,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACAD,EAAAA,OAAO,CAACE,WAAR,CAAoBF,OAAO,CAACG,WAAR,KAAwB,CAA5C;AACA,QAAMR,MAAM,GAAG;AAAES,IAAAA,OAAO,EAAEJ,OAAX;AAAoBK,IAAAA,IAAI,EAAE;AAA1B,GAAf;AACA,QAAMC,SAAS,GAAG;AAAEF,IAAAA,OAAO,EAAEJ,OAAX;AAAoBO,IAAAA,MAAM,EAAE,WAA5B;AAAyCF,IAAAA,IAAI,EAAE;AAA/C,GAAlB;;AAEA,MAAGN,YAAH,EAAiB;AACfzB,IAAAA,MAAM,CAACwB,MAAP,CAAcZ,GAAd,EAAmBa,YAAnB;AACD,GAFD,MAEO;AACLzB,IAAAA,MAAM,CAACwB,MAAP,CAAcZ,GAAd,EAAmBS,MAAnB;AACArB,IAAAA,MAAM,CAACwB,MAAP,CAAcZ,GAAd,EAAmBoB,SAAnB;AACD;AAEF;;AAED,eAAe;AACb9B,EAAAA,GADa;AACRK,EAAAA,MADQ;AAEbI,EAAAA,WAFa;AAGbO,EAAAA,YAHa;AAIbM,EAAAA;AAJa,CAAf","sourcesContent":["import Cookie from 'react-cookies'\nimport * as ConfigEnv from './ConfigEnv'\n\nconst KEY = {\n  ACCESS_TOKEN : 'access_token',\n  ACCESS_TOKEN_TEST : 'access_token_test',\n  ACCESS_TOKEN_DEV : 'access_token_dev',\n  ANONYMOUS_TOKEN : 'anonymous_token',\n}\n\nconst METHOD = {\n  SAVE: 'SAVE',\n  LOAD: 'LOAD',\n  REMOVE: 'REMOVE',\n}\n\n\nfunction getTokenKey () {\n  let key = KEY.ACCESS_TOKEN\n  const domainAPI = ConfigEnv.DOMAIN_API\n  const isTesting = (domainAPI || '').includes('testing-api')\n  const isDev = (domainAPI || '').includes('dev-api')\n  if (isTesting) key = KEY.ACCESS_TOKEN_TEST\n  else if (isDev) key = KEY.ACCESS_TOKEN_DEV\n  return key\n}\n\nfunction handleCookie ({type, key, value, option}) {\n  //time expire token\n  switch (type) {\n    case METHOD.SAVE: {\n      return Cookie.save(key, value, option)\n    }\n    case METHOD.LOAD: {\n      return Cookie.load(key)\n    }\n    case METHOD.REMOVE: {\n      Cookie.remove(key, option)\n      return\n    }\n  }\n\n}\nfunction remove(key, removeOption){\n  const timeNow = new Date()\n  timeNow.setFullYear(timeNow.getFullYear() + 1)\n  const option = { expires: timeNow, path: '/' }\n  const oldOption = { expires: timeNow, domain: '.vieon.vn', path: '/' }\n\n  if(removeOption) {\n    Cookie.remove(key, removeOption)\n  } else {\n    Cookie.remove(key, option)\n    Cookie.remove(key, oldOption)\n  }\n\n}\n\nexport default {\n  KEY, METHOD,\n  getTokenKey,\n  handleCookie,\n  remove,\n}\n"]},"metadata":{},"sourceType":"module"}